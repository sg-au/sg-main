<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SG Platform</title>
    <link rel="shortcut icon" type="image/png" href="/platform/assets/images/logos/favicon.png" />
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <link rel="stylesheet" href="/platform/assets/css/styles.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.gstatic.com" rel="preconnect" />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <%-include("../partials/preloader-css")%>
        <%-include("../partials/preloader-js")%>

</head>
<%-include("../partials/post-head")%>

    <script>
        function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    </script>

    <style>
        .semester {
            margin-bottom: 40px;
        }

        .semester h2 {
            font-size: 18px;
            margin-bottom: 20px;
            text-align: center;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
            font-size: 14px;
        }

        td input {
            width: 100%;
            padding: 6px;
            box-sizing: border-box;
        }
    </style>

    <body>
        <!--  Body Wrapper -->
        <%-include("../partials/preloader")%>
            <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed">
                <%-include("../partials/sidebar")%>
                    <!--  Main wrapper -->
                    <div class="body-wrapper">
                        <%-include("../partials/header")%>
                            <div class="container-fluid">
                                <div class="container-fluid">
                                    <div class="row justify-content-between">
                                        <div class="card">
                                            <div style="overflow-x:scroll" class="card-body">
                                                <div class="flex-row mb-2">
                                                    <span class="fs-6 fw-semibold">CGPA Planner Form</span>
                                                </div>
                                                <div class="flex-row mb-3">
                                                    <ul class="list-inline">
                                                      <span style="font-size: 10px;" class="fs-3 fw-semibold">
                                                        With this set of predictive tools specifically designed for Ashokans, you can simulate future CGPA scenarios based on expected grades. Enter Retakes, Pass/Fail(s), Audits, Transfer Credits and more to calculate your Semester GPA, CGPA, Dean's List for Semester, Latin Honors, and more. Enter target CGPA and know what will be your minimum required grades.
                                                    </span>                                         
                                                    </ul>
                                                  </div>
                                                <br />
                                                    <div class="row" id="grade-input">
                                                        <div class="col-md-12">
                                                            <textarea name="cgpa_data" required id="gradeInput" class="form-control" rows="10" cols="50" placeholder="Go to the Grades & Evaluations' page on your AMS -> then ctrl A -> ctrl C and ctrl V in here to sync. On Macs, use cmd A, cmd C and cmd V instead."></textarea><br />
                                                            <label for="pfCredits" class="form-label">Until now, for how many <span style="color:red">CREDITS (not courses)</span> have you chosen P/F</label><br />
                                                            <input type="number" placeholder="Enter number of credits" class="form-control" name="pf_credits" id="pf_credits" style="width:100%" />
                                                        </div>
                                                    </div>
                                                    <br />
                                                    <div class="row">
                                                        <div class = "col-md-6 mx-auto">
                                                            <button type="submit" id="parseButton" class="btn btn-primary" style="width: 100%;">Calculate</button>
                                                        </div>
                                                    </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>

                    <script>
                        function parseGradeData(text) {
                            const lines = text.split('\n').map(line => line.trim());
                            const data = {
                                degreeCGPA: 0,
                                majorCGPA: 0,
                                totalCredits: 0,
                                semesters: []
                            };

                            let currentSemester = null;
                            let courseSection = false;

                            for (let line of lines) {
                                if (line.includes('Degree/Diploma CGPA')) {
                                const parts = line.match(/Degree\/Diploma CGPA: (\d+\.\d+).*CGPA for Major: (\d+\.\d+).*Total counted credits: (\d+)/);
                                if (parts) {
                                    data.degreeCGPA = parseFloat(parts[1]);
                                    data.majorCGPA = parseFloat(parts[2]);
                                    data.totalCredits = parseInt(parts[3], 10);
                                }
                                } else if (line.startsWith('Monsoon') || line.startsWith('Spring') || line.startsWith('Summer')) {
                                if (currentSemester) {
                                    data.semesters.push(currentSemester);
                                }
                                currentSemester = {
                                    semester: line,
                                    courses: [],
                                    gpa: 0,
                                    semesterCreditsEarned: 0,
                                    cgpa: 0
                                };
                                courseSection = true;
                                } else if (line.includes('GPA') && line.includes('Semester Credits Earned') && line.includes('CGPA')) {
                                const gpaMatch = line.match(/GPA:\s*(\d+\.\d+)/);
                                const creditsMatch = line.match(/Semester Credits Earned:\s*(\d+)/);
                                const cgpaMatch = line.match(/CGPA:\s*(\d+\.\d+)/);
                                
                                if (gpaMatch) currentSemester.gpa = parseFloat(gpaMatch[1]);
                                if (creditsMatch) currentSemester.semesterCreditsEarned = parseInt(creditsMatch[1], 10);
                                if (cgpaMatch) currentSemester.cgpa = parseFloat(cgpaMatch[1]);
                                } else if (courseSection && line.match(/^\d+/) && !line.includes('systems.support')) {
                                const [_, code, title, creditsRegistered, grade, creditsEarned, gradePoints] = line.split(/\t+/);
                                currentSemester.courses.push({
                                    code,
                                    title,
                                    creditsRegistered: parseFloat(creditsRegistered) || null,
                                    grade: grade !== '--' ? grade : null,
                                    creditsEarned: parseFloat(creditsEarned) || null,
                                    gradePoints: parseFloat(gradePoints) || null
                                });
                                }
                            }

                            if (currentSemester) {
                                data.semesters.push(currentSemester);
                            }

                            let sumCredits = 0;
                            let sumGradePoints = 0;

                            for (i=0; i<data.semesters.length-3; i++) {
                                sumCredits += data.semesters[i].semesterCreditsEarned
                                for (j=0; j<data.semesters[i].courses.length; j++) {
                                sumGradePoints += data.semesters[i].courses[j].gradePoints;
                                }
                                // console.log(semester);
                            }

                            console.log(sumCredits, sumGradePoints, sumGradePoints / sumCredits);  


                            return data;
                        }

                        function createInputBoxes(parsedData) {
                            const inputContainer = document.getElementById('grade-input');
                            inputContainer.innerHTML = ''; // Clear the existing textarea and button

                            parsedData.semesters.forEach((semester, semesterIndex) => {
                                const semesterDiv = document.createElement('div');
                                semesterDiv.className = 'semester';
                                const semesterTitle = document.createElement('h2');
                                semesterTitle.innerText = semester.semester;
                                semesterDiv.appendChild(semesterTitle);

                                const table = document.createElement('table');

                                // Create table header
                                const headerRow = document.createElement('tr');
                                const headers = ['Course Title', 'Credits Registered', 'Grade Received'];
                                headers.forEach(headerText => {
                                    const th = document.createElement('th');
                                    th.innerText = headerText;
                                    headerRow.appendChild(th);
                                });
                                table.appendChild(headerRow);

                                // Create table rows for courses
                                semester.courses.forEach((course, courseIndex) => {
                                    const row = document.createElement('tr');

                                    const fields = [
                                        { value: course.title, key: 'title' },
                                        { value: course.creditsRegistered, key: 'creditsRegistered' },
                                        { value: course.grade, key: 'grade' },
                                    ];

                                    fields.forEach(field => {
                                        const td = document.createElement('td');
                                        const input = document.createElement('input');
                                        input.type = 'text';
                                        input.value = field.value;
                                        input.dataset.semesterIndex = semesterIndex;
                                        input.dataset.courseIndex = courseIndex;
                                        input.dataset.key = field.key;
                                        td.appendChild(input);
                                        row.appendChild(td);
                                    });

                                    table.appendChild(row);
                                });

                                semesterDiv.appendChild(table);
                                inputContainer.appendChild(semesterDiv);
                            });
                        }

                        document.getElementById('parseButton').addEventListener('click', async () => {
                            const text = document.getElementById('gradeInput').value;
                            const pf_credits= document.getElementById('pf_credits').value;
                            const data = parseGradeData(text); // Assume this parses the input
                            // createInputBoxes(data); // Create input boxes based on parsed data
                            var cgpa_data={
                                cgpa_data:data,
                                pf_credits:pf_credits
                            }

                            try {
                                const response = await fetch('/platform/cgpa-planner', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json', // Ensure correct content type
                                    },
                                    body: JSON.stringify(cgpa_data), // Convert data object to JSON
                                });

                                 // Detecting positive response
                                if (response.status === 202) {
                                    console.log('Success: Data processed successfully');
                                    // You can update the UI here to indicate success
                                    location.reload();
                                    // alert('Data was successfully updated!');
                                } else {
                                    console.error('Error: Something went wrong', response.status, response.statusText);
                                    alert('Error updating data.');
                                }
                            } catch (error) {
                                console.error('Network error:', error);
                            }
                        });
                    </script>

                    <script src="/platform/assets/libs/jquery/dist/jquery.min.js"></script>
                    <script src="/platform/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
                    <script src="/platform/assets/js/sidebarmenu.js"></script>
                    <script src="/platform/assets/js/app.min.js"></script>
                    <script src="/platform/assets/libs/apexcharts/dist/apexcharts.min.js"></script>
                    <script src="/platform/assets/libs/simplebar/dist/simplebar.js"></script>
                    <script src="/platform/assets/js/dashboard.js"></script>
                    <script src="/platform/assets/js/theme.js"></script>
                    <script src="/platform/assets/js/main.js"></script>
                    <!-- <script src="https://code.jquery.com/jquery-3.7.0.js"></script> -->
                    <script src="/platform/assets/js/dataTables.js"></script>
                    <!-- <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap4.min.js"></script> -->
                    <!-- <%-include("../partials/preloader-js")%> -->
    </body>

</html>