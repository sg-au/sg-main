<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SG Platform</title>
    <link rel="shortcut icon" type="image/png" href="/platform/assets/images/logos/favicon.png" />
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <link rel="stylesheet" href="/platform/assets/css/styles.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.gstatic.com" rel="preconnect" />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <%-include("../partials/preloader-css")%>
        <%-include("../partials/preloader-js")%>

</head>
<%-include("../partials/post-head")%>

    <script>
        function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    </script>

    <style>
        @media (max-width: 600px) {
            .reduce-padding {
                padding-left: 10px; 
                padding-right: 10px;
            }
        } 
        .semester {
            margin-bottom: 40px;
        }

        .semester h2 {
            font-size: 18px;
            margin-bottom: 20px;
            text-align: center;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
            font-size: 14px;
        }

        td input {
            width: 100%;
            padding: 6px;
            box-sizing: border-box;
        }
        #pills-tab li .active{
        background:#0c3862;
        color:white;
    }
    .nav-pills {
        display: flex;
        justify-content: space-evenly; /* Adjusts the spacing between tabs */
        flex-wrap: nowrap; /* Prevents wrapping to the next line */
        overflow-x: auto; /* Adds a horizontal scroll on smaller screens if needed */
    }

    /* Adjust font size and padding for smaller screens */
    @media (max-width: 600px) {
        .nav-link.small-pills {
            font-size: 12px; /* Smaller font size */
            padding: 8px 10px; /* Adjust padding */
        }

        .nav-pills {
            justify-content: flex-start; /* Aligns tabs to the left */
            gap: 10px; /* Adds spacing between the tabs */
        }
    }
    .calc-button{
        background-color: #0c3862;
    }
    .calc-button:hover {
        background-color: #c4122f;
    }
    </style>
    <style>
        /* Custom Styles */
        .course-card {
            margin-bottom: 2rem;
        }

        /* Style for the header container holding "Course Name" and "Remove Course" button */
        .course-card .card-header > .d-flex {
            display: flex;
            align-items: center; /* Vertically align items in the center */
            justify-content: space-between; /* Distribute space between the items */
            width: 100%; /* Full width for alignment */
        }

        /* Adjustments for the "Course Name" heading */
        .course-card .card-header h5 {
            margin: 0; /* Remove default margin */
            line-height: 1.5; /* Adjust line-height for better vertical alignment */
        }

        /* Adjustments for the "Remove Course" button */
        .course-card .card-header .btn {
            margin: 0; /* Remove any default vertical margin */
            padding: 5px 10px; /* Optional: Adjust padding for visual alignment */
        }

        /* Muted gray highlight for the extra credit section */
        .extra-credit-section {
            border: 2px dashed #b3b3b3;
            /* background-color: #ffffff; */
            margin-top: 20px;
        }

        /* Always show computed grade box */
        .current-grade-box {
            border: 2px solid #ccc;
            padding: 15px;
            font-size: 1.5rem;
            background-color: #f6fff5;
        }

        /* Enable horizontal scrolling for course content */
        .course-card .card-body {                                                                    
            white-space: nowrap;
            padding-bottom: 1rem;
        }

        /* Maintain proper column layout */
        .component-header, .component-row {
            display: flex;
            flex-wrap: nowrap; /* Prevent wrapping */
            align-items: center;
            justify-content: space-between;
            /* margin-left: 5px; */
            width: 100%; /* Ensure content stays within the card */
        }

        /* Maintain proper column layout with padding between fields */
        .component-header > div,
        .component-row > div {
            flex: 1; /* Each column takes equal space */
            text-align: center; /* Center-align headers and inputs */
            padding: 5px; /* Add padding inside each field */
            margin-right: 20px; /* Add space between fields */
        }

        /* Add the margin on the first field in each row to keep alignment */
        .component-header > div:first-child,
        .component-row > div:first-child {
            margin-left: 7px;
        }

        .component-letter {
            padding: 5px;
            height: 38px; /* Match input field height */
        }

        /* Ensure remove-component button is properly positioned and easy to click */
        .component-row {
            display: flex;
            align-items: center; /* Align all elements vertically in the center */
            justify-content: space-between; /* Spread elements evenly */
            flex-wrap: nowrap; /* Prevent the row from breaking */
        }

        /* Ensure the last column aligns the button to the right */
        .component-row .col-12.col-md-2:last-child {
            display: flex;
            justify-content: flex-end; /* Align to the right */
            padding-right: 5px; /* Add 5px padding on the right */
        }

        /* Remove button styling for alignment */
        .remove-component-btn {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0px;
            background-color: #fa896b;
            color: white;
            border: none;
            cursor: pointer;
            margin-left: auto; /* Push the button to the right if needed */
        }

        .add-buttons{
            flex-wrap: nowrap;
            width: 80%
        }

        /* Adjustments for mobile screens */
        @media only screen and (max-width: 768px) {
            .course-card .card-body {                                                                        
                white-space: nowrap;
            }

            .component-header, .component-row {
                display: flex;
                min-width: 800px; /* Prevent shrinking on small screens */
            }

            .component-header > div, .component-row > div {
                flex: 1;
                min-width: 150px;
            }

            /* Ensure the header elements stack correctly without overlap */
            .course-card .card-header {
                width: 100%;
                flex-direction: row;
                align-items: center;
                text-align: left;
            }

            .course-card .card-header input {
                flex-direction: row;
                margin-top: 10px;
                max-width: 100%; /* Maintain a smaller input for mobile while not being full-width */
            }

            /* Ensure the extra credit section matches the width and scroll behavior of the course card */
            .extra-credit-section {
                margin-top: 20px;
                width: 100%; /* Make sure it spans the entire width */
                display: flex;
                align-items: center;
            }

            /* Ensure the content inside the extra credit section aligns with other components */
            .extra-credit-section .card-header {
                white-space: normal; /* Allow text to wrap */
                overflow-wrap: break-word; /* Break long words if necessary */
                word-wrap: break-word; /* Older support for word wrapping */
                width: 100%; /* Ensure the header takes up the full width of the card */
                box-sizing: border-box; /* Include padding and borders in the width */                                                                                                                                               
            }
            
            .extra-credit-section .card-body {
                width: 100%; /* Make it match the full width */                                                                                                                                                
            }

            /* Align add buttons vertically for easier tapping */
            .add-buttons {
                flex-wrap: wrap;
                width: 100%;
            }

            .extra-credit-toggle-btn {
                width: auto;
                margin-top: 10px;
                margin-bottom: 10px;
            }

            .add-component-btn {
                margin-bottom: 10px;
            }

            /* Grade box padding for a better experience on mobile */
            .current-grade-box {
                font-size: 1.2rem;
                padding: 10px;
            }
            html.dark th {
                background-color: black;
            }
        }
    </style>
    <body>
        <!--  Body Wrapper -->
        <%-include("../partials/preloader")%>
            <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed">
                <%-include("../partials/sidebar")%>
                    <!--  Main wrapper -->
                    <div class="body-wrapper">
                        <%-include("../partials/header")%>
                            <div class="container-fluid">
                                <div class="container-fluid">
                                    <div class="row justify-content-between">
                                        <div class="card">
                                            <div style="overflow-x:scroll;" class="card-body reduce-padding">
                                                <div class="flex-row mb-2">
                                                    <span class="fs-6 fw-semibold">CGPA Planner</span>
                                                </div>
                                                <!-- <div class="flex-row mb-3">
                                                    <ul class="list-inline">
                                                        <span style="font-size: 10px;" class="fs-3 fw-semibold">
                                                            With this set of predictive tools specifically designed for Ashokans, you can simulate future CGPA scenarios based on expected grades. Enter Retakes, Pass/Fail(s), Audits, Transfer Credits and more to calculate your Semester GPA, CGPA, Dean's List for Semester, Latin Honors, and more. Enter target CGPA and know what will be your minimum required grades.
                                                        </span>                                         
                                                    </ul>
                                                </div> -->
                                                <br />
                                                
                                                <div class="container mt-3">
                                                    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                                                        <li class="nav-item" role="presentation">
                                                           <button class="nav-link small-pills active" id="pills-instructions-tab" data-bs-toggle="pill" data-bs-target="#evaluations" type="button" role="tab" aria-controls="#evaluations" aria-selected="true">
                                                              Upcoming Semester
                                                           </button>
                                                        </li>
                                                        <li class="nav-item" role="presentation">
                                                            <button class="nav-link small-pills" id="pills-1-tab" data-bs-toggle="pill" data-bs-target="#updateGrades" type="button" role="tab" aria-controls="#updateGrades" aria-selected="true">Grade Planner</button>
                                                        </li>
                                                        <li class="nav-item" role="presentation">
                                                            <button class="nav-link small-pills" id="pills-12-tab" data-bs-toggle="pill" data-bs-target="#raiseGPASection" type="button" role="tab" aria-controls="#raiseGPASection" aria-selected="true">Raise GPA Calculator</button>
                                                        </li>
                                                    </ul>
                                                    <br />

                                                    <!-- Move your existing grade table here -->
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            <div style="overflow-x:scroll" class="table-scrollable">
                                                                <table id="tblListViewCR1" class="table">
                                                                    <thead style="background: #0d3862; color: #fff; border-radius: 20px;">
                                                                        <tr>
                                                                            <th> <strong id="blue-cgpa" style="float:left;width:33%">Degree/Diploma CGPA: <%=cgpa_data.degreeCGPA%> </strong> <strong id="blue-totalCredits" style="float:right;width:33%;text-align: right;">Total counted credits: <%=cgpa_data.totalCredits%></strong></th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody></tbody>
                                                                </table>
                                                            </div>
                                                            <!-- <div class="mb-3 text-end text-center text-md-end">
                                                                <label for="pfCredits" class="form-label">Until now, for how many <span style="color:red">CREDITS (not courses)</span> have you chosen P/F</label><br />
                                                                <input oninput="updateCalc(1,1)" type="number" class="form-control float-end" id="pfCredits" value="<%=pf_credits%>" style="width: auto;" />
                                                            </div>
                                                            <br /><br /> -->
                                                        </div>
                                                    </div>
                                            
                                                    <div class="tab-content">
                                                        <!-- Evaluations Tab Content -->
                                                        <div id="evaluations" class="tab-pane fade show active" aria-labelledby="evaluationTab">
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <div>
                                                                        <div class="d-flex">
                                                                            <span class="fs-3 fw-semibold"><a href="#PastSemData">Click </a>to view past semester data</span>
                                                                        </div>
                                                                        <br />
                                                                        <div class="d-flex">
                                                                            <button onclick="location.reload()" class="btn btn-light mr-2" style="border:1px solid black;">Reset Data</button>
                                                                            <a href="/platform/cgpa-planner-reset" class="btn btn-light">Re-sync From AMS</a>
                                                                        </div>
                                                                        <!-- <br />
                                                                        <span>Click <a href="#" data-bs-toggle="modal" data-bs-target="#retakeModal">here</a> if you are retaking any course(s).</span> -->
                                                                        <div class="modal fade" id="retakeModal" tabindex="-1" aria-labelledby="retakeModalLabel" aria-hidden="true">
                                                                            <div class="modal-dialog modal-lg modal-dialog-centered">
                                                                                <div class="modal-content">
                                                                                    <div class="modal-header">
                                                                                        <h5 class="modal-title" id="retakeModalLabel">Declare Retakes</h5>
                                                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                                                    </div>
                                                                                    <% var reversedSemesters = cgpa_data.semesters.slice().reverse(); %>
                                                                                    <div id="retakeModalBody" class="modal-body">
                                                                                        I am retaking                                                                                            
                                                                                        <% reversedSemesters.forEach((semester, semesterIndex) => { %>
                                                                                            <%if(semester.semesterCreditsEarned==0 && semester.gpa==0){%>
                                                                                                <select class="" style="border: none; max-width: 80%;" name="currentCourse" id="currentCourse">
                                                                                                    <option value="">Select</option>
                                                                                                    <% semester.courses.forEach((course, courseIndex) => { %>
                                                                                                        <option value="<%= courseIndex %>"><%= course.title %>-<%= semester.semester %></option>
                                                                                                    <% }); %>
                                                                                                </select>
                                                                                            <% } %>
                                                                                        <% }) %>
                                                                                        to replace
                                                                                        <select class="" style="border: none; max-width: 80%;" name="retakeCourse" id="retakeCourse">
                                                                                            <option value="">Select</option>
                                                                                            <% reversedSemesters.forEach((semester, semesterIndex) => { %>
                                                                                                <%if(semester.semesterCreditsEarned!=0 && semester.gpa!=0){%>
                                                                                                    <% semester.courses.forEach((course, courseIndex) => { %>
                                                                                                        <option value="<%= course.gradePoints %>,<%= course.creditsEarned %>"><%= course.title %>-<%= semester.semester %></option>
                                                                                                    <% }) %>
                                                                                                <% } %>
                                                                                            <%})%>
                                                                                        </select>
                                                                                    </div>
                                                                                    <div class="modal-footer">
                                                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Save</button>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <br /><br />
                                                                        <div style="overflow-x: scroll;">
                                                                            <table id="tblListViewCR2" class="table table-bordered">
                                                                                <thead>
                                                                                    <tr style="font-weight:bold;background:#c4122f;color:#fff">
                                                                                        <th class="table-checkbox" data-filter="false" data-sorter="false">#</th>
                                                                                        <th>Code</th>
                                                                                        <th>Title</th>
                                                                                        <th>Credits Registered</th>
                                                                                        <th >Grade</th>
                                                                                        <!-- <th>Grade Points</th> -->
                                                                                        <th>Retake</th>
                                                                                    </tr>
                                                                                </thead>
                                                                                <tbody>
                                                                                    <% 
                                                                                        var reversedSemesters = cgpa_data.semesters.slice().reverse(); // Reverse the array
                                                                                    %>
                                                                                    <% reversedSemesters.forEach((semester, semesterIndex) => { %>
                                                                                        <%if(semester.semesterCreditsEarned==0 && semester.gpa==0){%>
                                                                                        <!-- Semester Header Row -->
                                                                                        <tr style="font-weight:bold;background:#0d3862;color:#fff">
                                                                                            <td colspan="7"><%= semester.semester %></td>
                                                                                        </tr>
                                                                                        <!-- Loop through courses in the semester -->
                                                                                        <% semester.courses.forEach((course, courseIndex) => { %>
                                                                                            <tr class="tr <%= semesterIndex + 1%>">
                                                                                                <td><%= courseIndex + 1 %></td>
                                                                                                <td ><%= course.code %></td>
                                                                                                <td><%= course.title %></td>
                                                                                                <td id="creditsRegistered <%= courseIndex + 1 %> <%= semesterIndex + 1%>"><%= course.creditsRegistered %></td>
                                                                                                <td >
                                                                                                    <select style="border:none" name="letter-grade" id="select <%= courseIndex + 1 %> <%= semesterIndex + 1%>">
                                                                                                        <option value="Select">Select</option>
                                                                                                        <option value="A">A</option>
                                                                                                        <option value="A-">A-</option>
                                                                                                        <option value="B+">B+</option>
                                                                                                        <option value="B">B</option>
                                                                                                        <option value="B-">B-</option>
                                                                                                        <option value="C+">C+</option>
                                                                                                        <option value="C">C</option>
                                                                                                        <option value="C-">C-</option>
                                                                                                        <option value="D+">D+</option>
                                                                                                        <option value="D">D</option>
                                                                                                        <option value="D-">D-</option>
                                                                                                        <option value="P">P</option>
                                                                                                        <option value="F (w P/F)">F (w P/F)</option>
                                                                                                        <option value="F (w/o P/F)">F (w/o P/F)</option>
                                                                                                        <option value="AU">AU</option>
                                                                                                        <option value="TP">TP</option>
                                                                                                    </select>
                                                                                                </td>
                                                                                                <!-- <td id="creditsEarned <%= courseIndex + 1 %> <%= semesterIndex + 1%>"><%= course.creditsEarned ? course.creditsEarned : 'N/A' %></td> -->
                                                                                                <!-- <td id="gradePoints <%= courseIndex + 1 %> <%= semesterIndex + 1%>"><%= course.gradePoints ? course.gradePoints : 'N/A' %></td> -->
                                                                                                <td class="text-center"><input type="checkbox" name="retake" onchange="handleRetakeCheck(`<%= courseIndex + 1 %> <%= semesterIndex + 1%>`, `<%= JSON.stringify(course) %>`)" id="retake <%= courseIndex + 1 %> <%= semesterIndex + 1%>"></td>
                                                                                            </tr>
                                                                                        <% }); %>

                                                                                        <!-- Semester GPA, Credits Earned, CGPA Row -->
                                                                                        <tr style="font-weight:bold;background:#ddd;">
                                                                                            <td colspan="2" style="text-align:right"></td>
                                                                                            <td id="gpa-upcoming <%=semesterIndex+1%>" style="white-space:nowrap;text-align:right">GPA: <%= semester.gpa %></td>
                                                                                            <td id="creditsEarned-upcoming <%=semesterIndex+1%>" colspan="2" >Semester Credits Earned: <%= semester.semesterCreditsEarned %></td>
                                                                                            <td id="cgpa-upcoming <%=semesterIndex+1%>" >CGPA: <%= semester.cgpa %></td>
                                                                                        </tr>
                                                                                        <%}%>
                                                                                    <% }); %> 
                                                                                </tbody>
                                                                            </table>
                                                                        </div>
                                                                        <br />
                                                                        <button onclick="updateCalculation()" class="mx-auto d-block btn btn-danger calc-button" style="border: none; width: 60%; height: 40px;">Calculate</button>
                                                                        <br />
                                                                        <br />
                                                                        <span class="fs-6 fw-semibold" id="PastSemData">Past Semester Data</span>
                                                                        <br />
                                                                        <br />
                                                                        <div class="accordion" id="semesterAccordion">
                                                                            <% 
                                                                                var reversedSemesters = cgpa_data.semesters.slice().reverse(); // Reverse the array
                                                                            %>
                                                                        
                                                                            <% reversedSemesters.forEach((semester, semesterIndex) => { %>
                                                                                <% if(semester.semesterCreditsEarned != 0 && semester.gpa != 0) { %>
                                                                        
                                                                                <!-- Semester Header -->
                                                                                <div class="accordion-item">
                                                                                    <h2 class="accordion-header" id="heading<%= semesterIndex %>">
                                                                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse<%= semesterIndex %>" aria-expanded="false" aria-controls="collapse<%= semesterIndex %>">
                                                                                            Semester: <%= semester.semester %> (GPA: <%= semester.gpa %>, Credits Earned: <%= semester.semesterCreditsEarned %>)
                                                                                        </button>
                                                                                    </h2>
                                                                        
                                                                                    <!-- Collapsed content -->
                                                                                    <div id="collapse<%= semesterIndex %>" class="accordion-collapse collapse" aria-labelledby="heading<%= semesterIndex %>" data-bs-parent="#semesterAccordion">
                                                                                        <div class="accordion-body">
                                                                                            <!-- Table for each semester -->
                                                                                            <div style="overflow-x: scroll;">
                                                                                                <table class="table table-bordered">
                                                                                                    <thead>
                                                                                                        <tr style="font-weight:bold;background:#c4122f;color:#fff">
                                                                                                            <th class="table-checkbox" width="5px" data-filter="false" data-sorter="false">#</th>
                                                                                                            <th>Code</th>
                                                                                                            <th>Title</th>
                                                                                                            <th style="width:1%">Grade</th>
                                                                                                            <th style="width:1%">Credits Earned</th>
                                                                                                            <th style="width:1%">Grade Points</th>
                                                                                                        </tr>
                                                                                                    </thead>
                                                                                                    <tbody>
                                                                                                        <% semester.courses.forEach((course, courseIndex) => { %>
                                                                                                            <% if(course.grade == "AU") { %>
                                                                                                                <tr style="color:red">
                                                                                                                    <td><%= courseIndex + 1 %></td>
                                                                                                                    <td><%= course.code %></td>
                                                                                                                    <td><%= course.title %></td>
                                                                                                                    <td><%= course.grade %></td>
                                                                                                                    <td style="white-space:nowrap;"><%= course.creditsEarned ? course.creditsEarned : 'N/A' %></td>
                                                                                                                    <td style="white-space:nowrap;"><%= course.gradePoints ? course.gradePoints : 'N/A' %></td>
                                                                                                                </tr>
                                                                                                            <% } else { %>
                                                                                                                <tr>
                                                                                                                    <td><%= courseIndex + 1 %></td>
                                                                                                                    <td><%= course.code %></td>
                                                                                                                    <td><%= course.title %></td>
                                                                                                                    <td><%= course.grade %></td>
                                                                                                                    <td style="white-space:nowrap;"><%= course.creditsEarned ? course.creditsEarned : 'N/A' %></td>
                                                                                                                    <td style="white-space:nowrap;"><%= course.gradePoints ? course.gradePoints : 'N/A' %></td>
                                                                                                                </tr>
                                                                                                            <% } %>
                                                                                                        <% }); %>
                                                                            
                                                                                                        <!-- Semester GPA, Credits Earned, CGPA Row -->
                                                                                                        <tr style="font-weight:bold;background:#ddd;">
                                                                                                            <td colspan="2" style="text-align:right"></td>
                                                                                                            <td style="white-space:nowrap;text-align:right">GPA: <%= semester.gpa %></td>
                                                                                                            <td colspan="2">Semester Credits Earned: <%= semester.semesterCreditsEarned %></td>
                                                                                                            <td>CGPA: <%= semester.cgpa %></td>
                                                                                                        </tr>
                                                                                                    </tbody>
                                                                                                </table>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                                <% } %>
                                                                            <% }); %>
                                                                        </div>                                                                        
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!-- Add content for evaluations here -->
                                                        </div>
                                                        <!-- Add content for Grade Planner here -->
                                                        <div id="updateGrades" class="tab-pane fade" class="container-fluid mt-5" aria-labelledby="grdaeTab">
                                                            <!-- <h1 class="text-center mb-4">Grade Planner</h1> -->

                                                            <div id="coursesContainer">
                                                                <!-- Course cards will be dynamically inserted here by JavaScript -->
                                                            </div>
                                                        
                                                            <button class="btn btn-primary mt-3 mb-5 calc-button" onclick="addNewCourse()">+ Add Course</button>                                                       
                                                        </div>
                                                        <!-- Content for Grade Planner ends here -->
                                                        <div id="raiseGPASection" role="tabpanel" class="tab-pane fade" aria-labelledby="updateTab">
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <button onclick="resetForm()" class="btn btn-light" style="float:right">Reset Values</button><br />
                                                                        <br /><br />
                                                                    <div class="card">
                                                                        <div class="card-header">
                                                                            In order to raise my GPA by <input class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="raise"> points, if I maintain a <input class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="average"> average GPA, it will take <input disabled class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="additional"> additional credits.
                                                                            <br /><br /><button onclick="raiseGPA()" class="btn btn-light" style="float:right;border:1px solid black">Calculate</button><br />
                                                                            <br /><hr><br />
                                                                            I am taking <input class="form-control" style="width:100px;display:inline" type="number" step="1" id="semesterCredits"> credits this semester. If I want to raise my CGPA by <input class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="raiseAmount">, I need a <input disabled class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="needGPA"> GPA average on all my courses this semester.
                                                                            <br /><br /><button onclick="semGPA()" class="btn btn-light" style="float:right;border:1px solid black">Calculate</button><br />
                                                                            <br /><hr><br />
                                                                            If I average <input class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="averageGPA"> GPA for the next <input class="form-control" style="width:100px;display:inline" type="number" step="1" id="newCredits"> credits, then my CGPA would be <input disabled class="form-control" style="width:100px;display:inline" type="number" step="0.01" id="newCGPA">.
                                                                            <br /><br /><button onclick="cgpaAfterAverage()" class="btn btn-light" style="float:right;border:1px solid black">Calculate</button><br />
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>
                    
                    <script>
                        // Function to initialize the page and load any saved data from localStorage
                        document.addEventListener('DOMContentLoaded', () => {
                            loadDataFromLocalStorage();  // Load stored data on page load
                        });
                        
                        // Helper to generate default components without labels
                        function generateDefaultComponents(component = { name: '', score: '', total: '', letter: '', weight: '' }) {
                            return `
                                <div class="row mb-3 component-row align-items-center">
                                    <div class="col-12 col-md-2">
                                        <input type="text" class="form-control assessment-name" placeholder="e.g. Quiz" value="${component.name}" oninput="recomputeGrade(this)">
                                    </div>
                                    <div class="col-12 col-md-2">
                                        <input type="number" class="form-control component-score" placeholder="Score" value="${component.score}" oninput="syncInputs(this, 'score')">
                                    </div>
                                    <div class="col-12 col-md-2">
                                        <input type="number" class="form-control component-total" placeholder="Total" value="${component.total}" oninput="syncInputs(this, 'total')">
                                    </div>
                                    <div class="col-12 col-md-2">
                                        <select class="form-control component-letter" onchange="syncInputs(this, 'letter')">
                                            <option value="">Select Grade</option>
                                            ${generateLetterGradeOptions(component.letter)}
                                        </select>
                                    </div>
                                    <div class="col-12 col-md-2">
                                        <input type="number" class="form-control component-weight" placeholder="% of Class Grade" value="${component.weight}" oninput="recomputeGrade(this)">
                                    </div>
                                    <div class="col-12 col-md-2 d-flex align-items-center">
                                        <span class="component-percentage"></span> / <span class="component-letter-grade"></span>
                                        <button class="btn btn-danger btn-sm remove-component-btn ml-2" onclick="removeComponent(this)">
                                            <i class="fa fa-times"></i>
                                        </button>
                                    </div>
                                </div>`;
                        }
                                                                                        
                        function generateLetterGradeOptions(selectedGrade = '') {
                            const grades = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'];
                            return grades
                                .map(grade => `<option value="${grade}" ${grade === selectedGrade ? 'selected' : ''}>${grade}</option>`)
                                .join('');
                        }
                        
                        const gradeMapping = [
                            { letter: 'A', min: 89.5, max: 100 },
                            { letter: 'A-', min: 84.5, max: 89.49 },
                            { letter: 'B+', min: 79.5, max: 84.99 },
                            { letter: 'B', min: 74.5, max: 79.99 },
                            { letter: 'B-', min: 69.5, max: 74.99 },
                            { letter: 'C+', min: 64.5, max: 69.99 },
                            { letter: 'C', min: 59.5, max: 64.99 },
                            { letter: 'C-', min: 54.5, max: 59.99 },
                            { letter: 'D+', min: 49.5, max: 54.99 },
                            { letter: 'D', min: 44.5, max: 49.99 },
                            { letter: 'D-', min: 39.5, max: 44.99 },
                            { letter: 'F', min: 0, max: 39.99 }
                        ];
                        
                        function syncInputs(input, type) {
                            const componentRow = input.closest('.component-row');
                            const scoreInput = componentRow.querySelector('.component-score');
                            const letterInput = componentRow.querySelector('.component-letter');
                            const totalInput = componentRow.querySelector('.component-total');
                        
                            const numericalScore = parseFloat(scoreInput.value);
                            const totalScore = parseFloat(totalInput.value);
                        
                            if (type === 'letter') {
                                const letterGrade = input.value.toUpperCase();
                                const matchingGrade = gradeMapping.find(grade => grade.letter === letterGrade);
                                if (matchingGrade) {
                                    const avgScore = ((matchingGrade.min + matchingGrade.max) / 2).toFixed(2);
                                    scoreInput.value = avgScore; // Set numerical score based on letter grade
                                    totalInput.value = 100; // Automatically set total to 100
                                }
                            } else if (!isNaN(numericalScore) && !isNaN(totalScore) && totalScore > 0) {
                                const percentage = (numericalScore / totalScore) * 100;
                                const matchingGrade = gradeMapping.find(
                                    grade => percentage >= grade.min && percentage <= grade.max
                                );
                                if (matchingGrade) {
                                    letterInput.value = matchingGrade.letter;
                                }
                            }
                        
                            recomputeGrade(input); // Update calculations
                        }
                        
                        // Helper to generate the extra credit component
                        function generateExtraCreditComponent(extraCredit = { score: '', total: '', letter: '', weight: '' }) {
                            return `
                                <div class="extra-credit-section card mb-3">
                                    <div class="card-header text-black"><strong>Extra Credit (Does not count towards 100% weightage)</strong></div>
                                    <div class="card-body" style="overflow-x: auto;">
                                        <div class="row component-row">
                                            <div class="col-12 col-md-2">
                                                <input type="text" class="form-control assessment-name" value="Extra Credit" disabled>
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <input type="number" class="form-control component-score" placeholder="Score" value="${extraCredit.score}" oninput="syncInputs(this, 'score')">
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <input type="number" class="form-control component-total" placeholder="Total" value="${extraCredit.total}" oninput="syncInputs(this, 'total')">
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <select class="form-control component-letter" onchange="syncInputs(this, 'letter')">
                                                    <option value="">Select Grade</option>
                                                    ${generateLetterGradeOptions(extraCredit.letter)}
                                                </select>
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <input type="number" class="form-control component-weight extra-credit" placeholder="% of Class Grade" value="${extraCredit.weight}" oninput="recomputeGrade(this)">
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <span class="component-percentage"></span> / <span class="component-letter-grade"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>`;
                        }
                        
                        // Function to add a new course initialized with 3 grade components
                        function addNewCourse() {
                            const coursesContainer = document.getElementById('coursesContainer');
                        
                            const newCourseTemplate = `
                            <div class="card mt-3 course-card">
                                <div class="card-header d-flex flex-column align-items-start" style="background-color: #FFFFFF; color: white;">
                                    <div class="d-flex justify-content-between w-100">
                                        <h5>Course Name:</h5>
                                        <button class="btn btn-danger" onclick="removeCourse(this)">Remove Course</button>
                                    </div>
                                    <input type="text" class="form-control course-name mt-2" placeholder="e.g. Math 101" oninput="debounceSaveDataToLocalStorage()">
                                </div>
                                <div class="card-body">
                                    <div style="overflow-x:auto">
                                        <!-- Field labels displayed only once -->
                                        ${generateHeaderRow()}
                                        <div class="grade-components">
                                            <!-- Default grade components without labels -->
                                            ${generateDefaultComponents()}
                                            ${generateDefaultComponents()}
                                            ${generateDefaultComponents()}
                                        </div>
                                    </div>
                                    <div class="d-flex add-buttons" style="display: flex; justify-content: space-between; align-items: center; margin: 0 auto; margin-top: 15px; margin-bottom: 15px;">
                                        <button class="btn btn-secondary calc-button" onclick="addComponent(this)" style="flex: 1; margin: 5px;">+ Add Assessment</button>
                                        <button class="btn btn-secondary extra-credit-toggle-btn calc-button" onclick="toggleExtraCredit(this)" style="flex: 1; margin: 5px;">Add Extra Credit</button>
                                    </div>
                                </div>
                                <div class="card-footer text-center">
                                    <div class="current-grade-box" style="border: 2px solid #ccc; padding: 15px; font-size: 1.5rem;">
                                        <h6 class="current-grade">No Grade Computed</h6>
                                        <h6 class="current-weightage">Current Weightage: 0%</h6>
                                    </div>
                                </div>
                            </div>`;
                        
                            coursesContainer.insertAdjacentHTML('beforeend', newCourseTemplate);
                        }
                        
                        // Function to generate the header row for fields (to be shown only once)
                        function generateHeaderRow() {
                            return `
                                <div class="row mb-2 component-header">
                                    <div class="col-12 col-md-2"><strong>Assessment Name</strong></div>
                                    <div class="col-12 col-md-2"><strong>Score</strong></div>
                                    <div class="col-12 col-md-2"><strong>Total</strong></div>
                                    <div class="col-12 col-md-2"><strong>Letter Grade</strong></div>
                                    <div class="col-12 col-md-2"><strong>% of Class Grade</strong></div>
                                    <div class="col-12 col-md-2"><strong>Percentage / Letter Grade</strong></div>
                                </div>`;
                        }
                        
                        // Function to toggle the extra credit visibility
                        function toggleExtraCredit(button) {
                            const courseCard = button.closest('.course-card');
                            const extraCreditSection = courseCard.querySelector('.extra-credit-section');
                            
                            if (extraCreditSection) {
                                extraCreditSection.remove();
                                button.textContent = 'Add Extra Credit';
                            } else {
                                const cardBody = courseCard.querySelector('.card-body');
                                cardBody.insertAdjacentHTML('beforeend', generateExtraCreditComponent());
                                button.textContent = 'Remove Extra Credit';
                            }
                        
                            recomputeCourseGrade(courseCard); // Recompute the course grade after toggling extra credit
                            debounceSaveDataToLocalStorage(); // Save the state (whether extra credit is shown or hidden)
                        }
                        
                        // Function to add a new component (assessment) to a course
                        function addComponent(button) {
                            const gradeComponents = button.closest('.card-body').querySelector('.grade-components');
                            const extraCreditSection = button.closest('.card-body').querySelector('.extra-credit-section');
                        
                            const componentTemplate = generateDefaultComponents();
                            gradeComponents.insertAdjacentHTML('beforeend', componentTemplate);
                        
                            // Ensure extra credit remains at the bottom
                            button.closest('.card-body').appendChild(extraCreditSection);
                        
                            // Recompute the grade after adding a component
                            recomputeGrade(button.closest('.course-card'));
                            saveDataToLocalStorage();  // Save the updated data
                        }
                        
                        // Function to remove a component (assessment) from a course
                        function removeComponent(button) {
                            const componentRow = button.closest('.component-row'); // Find the parent row
                            const courseCard = button.closest('.course-card'); // Get the associated course card
                            componentRow.remove(); // Remove the component row
                        
                            recomputeCourseGrade(courseCard); // Recompute the course grade after removal
                            debounceSaveDataToLocalStorage(); // Save the updated data
                        }
                        
                        // Function to remove a course
                        function removeCourse(button) {
                            const courseCard = button.closest('.course-card');
                            courseCard.remove();
                            saveDataToLocalStorage();  // Save the updated data
                        }
                        
                        // Function to recompute course grade on any input change
                        function recomputeGrade(inputElement) {
                            calculatePercentage(inputElement);
                            calculateCourseGrade(inputElement.closest('.course-card'));
                            saveDataToLocalStorage();  // Save data whenever a grade is recalculated
                        }
                        
                        // Function to calculate the percentage for each assessment component
                        function calculatePercentage(inputElement) {
                            const componentRow = inputElement.closest('.component-row');
                            const score = parseFloat(componentRow.querySelector('.component-score').value);
                            const total = parseFloat(componentRow.querySelector('.component-total').value);
                            const percentageSpan = componentRow.querySelector('.component-percentage');
                            const letterGradeSpan = componentRow.querySelector('.component-letter-grade');
                        
                            if (!isNaN(score) && !isNaN(total) && total > 0) {
                                const percentage = (score / total) * 100;
                                percentageSpan.textContent = percentage.toFixed(2) + '%';
                                letterGradeSpan.textContent = getLetterGrade(percentage);
                            } else {
                                percentageSpan.textContent = '';
                                letterGradeSpan.textContent = '';
                            }
                        }
                        
                        // Function to calculate the overall grade for a course
                        function calculateCourseGrade(courseCard) {
                            const componentRows = courseCard.querySelectorAll('.component-row');  // Include both regular and extra credit components
                            let totalWeightedScore = 0;
                            let totalWeightage = 0;
                        
                            // Calculate regular and extra credit components
                            componentRows.forEach(row => {
                                const score = parseFloat(row.querySelector('.component-score').value);
                                const total = parseFloat(row.querySelector('.component-total').value);
                                const weightage = parseFloat(row.querySelector('.component-weight').value);
                        
                                if (!isNaN(score) && !isNaN(total) && !isNaN(weightage) && total > 0) {
                                    const componentPercentage = (score / total) * 100;
                                    totalWeightedScore += (componentPercentage * weightage) / 100;
                                    totalWeightage += weightage;
                                }
                            });
                        
                            // Normalize grade if total weightage is less than 100%
                            let finalGrade = totalWeightedScore;
                            if (totalWeightage > 0 && totalWeightage < 100) {
                                finalGrade = (totalWeightedScore / totalWeightage) * 100;
                            }
                        
                            const currentGradeSpan = courseCard.querySelector('.current-grade');
                            const currentWeightageSpan = courseCard.querySelector('.current-weightage');
                            const currentGradeBox = courseCard.querySelector('.current-grade-box');
                        
                            // Display the final grade and current weightage
                            currentGradeSpan.textContent = `Current Grade: ${finalGrade.toFixed(2)}% (${getLetterGrade(finalGrade)})`;
                            currentWeightageSpan.textContent = `Current Weightage: ${totalWeightage.toFixed(2)}%`;
                            currentGradeBox.classList.add('highlight');  // Add subtle highlight to results box
                            currentGradeBox.style.borderColor = 'lightgreen';  // Green border when grade is computed
                            currentGradeBox.style.backgroundColor = '#e6ffe6';  // Subtle green background
                        }
                        
                        // Grade to letter mapping function with boundary case handling
                        function getLetterGrade(percentage) {
                            const roundedPercentage = Math.round(percentage);  // Round to nearest integer
                            if (roundedPercentage >= 90) return 'A';
                            if (roundedPercentage >= 85) return 'A-';
                            if (roundedPercentage >= 80) return 'B+';
                            if (roundedPercentage >= 75) return 'B';
                            if (roundedPercentage >= 70) return 'B-';
                            if (roundedPercentage >= 65) return 'C+';
                            if (roundedPercentage >= 60) return 'C';
                            if (roundedPercentage >= 55) return 'C-';
                            if (roundedPercentage >= 50) return 'D+';
                            if (roundedPercentage >= 45) return 'D';
                            if (roundedPercentage >= 40) return 'D-';
                            return 'F';
                        }
                        
                        // Function to store course data in localStorage
                        function saveDataToLocalStorage() {
                            const coursesContainer = document.getElementById('coursesContainer');
                            const courses = [];
                        
                            // Loop through each course card and deconstruct its data
                            coursesContainer.querySelectorAll('.course-card').forEach(courseCard => {
                                const course = {
                                    name: courseCard.querySelector('.course-name').value,
                                    components: [],
                                    extraCredit: null,
                                    showExtraCredit: !!courseCard.querySelector('.extra-credit-section')
                                };
                        
                                // Deconstruct regular components
                                courseCard.querySelectorAll('.grade-components .component-row').forEach(componentRow => {
                                    const component = {
                                        name: componentRow.querySelector('.assessment-name').value,
                                        score: componentRow.querySelector('.component-score').value,
                                        letter: componentRow.querySelector('.component-letter').value,
                                        total: componentRow.querySelector('.component-total').value,
                                        weight: componentRow.querySelector('.component-weight').value
                                    };
                                    course.components.push(component);
                                });
                        
                                // Deconstruct extra credit if present
                                if (course.showExtraCredit) {
                                    const extraCreditRow = courseCard.querySelector('.extra-credit-section');
                                    const extraCredit = {
                                        score: extraCreditRow.querySelector('.component-score').value,
                                        letter: extraCreditRow.querySelector('.component-letter').value, // Save Letter Grade
                                        total: extraCreditRow.querySelector('.component-total').value,
                                        weight: extraCreditRow.querySelector('.component-weight').value
                                    };
                                    course.extraCredit = extraCredit;
                                }
                        
                                courses.push(course);
                            });
                        
                            // Store the courses array as a JSON string in localStorage
                            localStorage.setItem('courses', JSON.stringify(courses));
                        }
                        
                        // Function to debounce saving data to localStorage
                        function debounceSaveDataToLocalStorage() {
                            clearTimeout(window.saveDataTimeout);
                            window.saveDataTimeout = setTimeout(saveDataToLocalStorage, 500);
                        }
                        
                        // Function to load course data from localStorage and restore the UI
                        function loadDataFromLocalStorage() {
                            const savedCourses = JSON.parse(localStorage.getItem('courses'));
                        
                            if (savedCourses && savedCourses.length > 0) {
                                savedCourses.forEach(courseData => {
                                    addNewCourseFromData(courseData);
                                });
                            } else {
                                // If no data, add a default empty course
                                addNewCourse();
                            }
                        }
                        
                        function addNewCourseFromData(courseData) {
                            const coursesContainer = document.getElementById('coursesContainer');

                            const newCourseTemplate = `
                            <div class="card mt-3 course-card">
                                <div class="card-header d-flex flex-column align-items-start" style="background-color: #FFFFFF; color: black;">
                                    <div class="d-flex justify-content-between w-100">
                                        <h5>Course Name:</h5>
                                        <button class="btn btn-danger" onclick="removeCourse(this)">Remove Course</button>
                                    </div>
                                    <input type="text" class="form-control course-name mt-2" value="${courseData.name}" placeholder="e.g. Math 101" oninput="debounceSaveDataToLocalStorage()">
                                </div>
                                <div class="card-body">
                                    <div style='overflow-x:auto'>
                                        ${generateHeaderRow()}
                                        <div class="grade-components">
                                            ${courseData.components.map(component => generateDefaultComponents(component)).join('')}
                                        </div>
                                    </div>
                                    <div class="d-flex add-buttons" style="display: flex; justify-content: space-between; align-items: center; margin: 0 auto; margin-top: 15px; margin-bottom: 15px;">
                                        <button class="btn btn-secondary calc-button" onclick="addComponent(this)" style="flex: 1; margin: 5px;">+ Add Assessment</button>
                                        <button class="btn btn-secondary extra-credit-toggle-btn calc-button" onclick="toggleExtraCredit(this)" style="flex: 1; margin: 5px;">${courseData.showExtraCredit ? 'Remove Extra Credit' : 'Add Extra Credit'}</button>
                                    </div>
                                </div>
                                <div class="card-footer text-center">
                                    <div class="current-grade-box" style="border: 2px solid #ccc; padding: 15px; font-size: 1.5rem;">
                                        <h6 class="current-grade">No Grade Computed</h6>
                                        <h6 class="current-weightage">Current Weightage: 0%</h6>
                                    </div>
                                </div>
                            </div>`;

                            coursesContainer.insertAdjacentHTML('beforeend', newCourseTemplate);

                            const courseCard = coursesContainer.lastElementChild;

                            // Add extra credit if present
                            if (courseData.showExtraCredit) {
                                const cardBody = courseCard.querySelector('.card-body');
                                cardBody.insertAdjacentHTML('beforeend', generateExtraCreditComponent(courseData.extraCredit));
                            }

                            recomputeCourseGrade(courseCard); // Recompute grades after loading
                        }
                        
                        // Function to recompute the grade for a course card
                        function recomputeCourseGrade(courseCard) {
                            courseCard.querySelectorAll('.component-score, .component-total, .component-weight').forEach(input => {
                                recomputeGrade(input);
                            });
                        }                                                            
                    </script>
                    
                    <script>
                        // Function to reset all input fields by their specific ids
                        function resetForm() {
                            // Reset the value of each input field by its ID
                            document.getElementById("raise").value = '';
                            document.getElementById("average").value = '';
                            document.getElementById("semesterCredits").value = '';
                            document.getElementById("raiseAmount").value = '';
                            document.getElementById("newCredits").value = '';
                            document.getElementById("averageGPA").value = '';
                            document.getElementById("additional").value = '';
                            document.getElementById("newCGPA").value = '';
                            document.getElementById("needGPA").value = '';
                        }

                        // targetGPA, currentGPA, totalCredits, averageGPA
                        function calculateAdditionalCreditsNeeded(desiredGPA, currentGPA, totalCredits, averageGPA) {
                            // Calculate the total grade points earned so far
                            const totalPointsSoFar = currentGPA * totalCredits;
                            
                            // Formula to calculate the additional credits needed to reach the desired GPA
                            const additionalCreditsNeeded = (desiredGPA * totalCredits - totalPointsSoFar) / (averageGPA - desiredGPA);
                            
                            // Return the number of additional credits needed, ensuring it's non-negative
                            return additionalCreditsNeeded >= 0 ? additionalCreditsNeeded.toFixed(2) : 0;
                        }
                        
                        function raiseGPA() {
                            let currentGPA = parseFloat('<%=cgpa_data.degreeCGPA%>'); // Existing GPA from your backend
                            let degreeCreditsUntilNow = parseInt('<%=cgpa_data.totalCredits%>'); // Total completed credits from backend
                            let pfCredits = 0; // Parse P/F credits input as a float
                        
                            // Make sure to properly parse and handle the inputs
                            const raiseAmount = parseFloat(document.getElementById("raise").value); // How much you want to raise your GPA
                            const targetGPA = currentGPA + raiseAmount; // Calculate the target GPA
                            
                            if(targetGPA>4.0){
                                alert("The target GPA is greater than 4.0. Please enter a lower GPA raise amount.");
                            }

                            if(targetGPA < 0 || raiseAmount < 0){
                                alert("You have entered a negative value!");
                            }
                            
                            const totalCredits = degreeCreditsUntilNow - pfCredits; // Adjust total credits by subtracting P/F credits
                            const averageGPA = parseFloat(document.getElementById("average").value); // Average GPA you aim to maintain
                            
                            if(averageGPA < targetGPA){
                                alert("Your average GPA input: " + averageGPA + " is lesser than the target GPA: " + targetGPA + ". Please select a higher average GPA or a lower GPA raise.")
                            }
                            // Check if inputs are valid
                            if (isNaN(raiseAmount) || isNaN(totalCredits) || isNaN(averageGPA)) {
                                alert("Please enter valid numbers.");
                                return;
                            }
                        
                            // Calculate additional credits required
                            const additionalCredits = calculateAdditionalCreditsNeeded(targetGPA, currentGPA, totalCredits, averageGPA);
                        
                            // Display or return the result
                            document.getElementById("additional").value=additionalCredits;
                            // alert("You will need " + additionalCredits + " additional credits to raise your GPA by " + raiseAmount + " points.");
                        }

                        function calculateRequiredSemesterGPA(currentGPA, totalCredits, desiredGPAIncrease, semesterCredits) {
                            // Calculate the desired GPA by adding the GPA increase to the current GPA
                            const desiredGPA = currentGPA + desiredGPAIncrease;
                            
                            // Calculate the total grade points earned so far
                            const totalPointsSoFar = currentGPA * totalCredits;
                            
                            // Calculate the total grade points required for the desired GPA
                            const totalPointsRequired = desiredGPA * (totalCredits + semesterCredits);
                            
                            // Calculate the GPA required for this semester to reach the desired GPA
                            const requiredSemesterGPA = (totalPointsRequired - totalPointsSoFar) / semesterCredits;
                            
                            // Return the required semester GPA, ensuring it's non-negative
                            return requiredSemesterGPA >= 0 ? requiredSemesterGPA.toFixed(2) : 0;
                        }

                        function semGPA() {
                            let currentGPA = parseFloat('<%=cgpa_data.degreeCGPA%>'); // Existing GPA
                            let degreeCreditsUntilNow = parseInt('<%=cgpa_data.totalCredits%>'); // Total completed credits
                            let pfCredits = parseFloat(document.getElementById("pfCredits").value) || 0; // Parse P/F credits
                            let semesterCredits = parseFloat(document.getElementById("semesterCredits").value) || 0; // Parse semester credits
                            let raiseAmount = parseFloat(document.getElementById("raiseAmount").value) || 0; // Parse GPA raise amount (fixed this part)
                            
                            const totalCredits = degreeCreditsUntilNow - pfCredits; // Adjust total credits by subtracting P/F credits

                            if(semesterCredits < 0 || raiseAmount < 0){
                                alert("You have entered a negative value!");
                            }

                            // Calculate the required semester GPA using the fixed function
                            var needGPA = calculateRequiredSemesterGPA(currentGPA, totalCredits, raiseAmount, semesterCredits);
                            
                            // Output the result to the "needGPA" field
                            if(needGPA>4.0){
                                alert("The required GPA is greater than 4.0. Please enter a lower GPA raise amount or higher semester credits.");
                            } else{
                                document.getElementById("needGPA").value = needGPA;
                            }
                        }

                        function calculateNewCGPA(currentGPA, totalCredits, averageGPA, newCredits) {
                            // Calculate the total grade points earned so far
                            const totalPointsSoFar = currentGPA * totalCredits;
                            
                            // Calculate the total grade points earned in the new credits
                            const totalNewPoints = averageGPA * newCredits;
                            
                            // Calculate the new CGPA
                            const newCGPA = (totalPointsSoFar + totalNewPoints) / (totalCredits + newCredits);
                            
                            // Return the new CGPA, rounded to 2 decimal places
                            return newCGPA.toFixed(2);
                        }

                        function cgpaAfterAverage(){
                            let currentGPA = parseFloat('<%=cgpa_data.degreeCGPA%>'); // Existing GPA
                            let degreeCreditsUntilNow = parseInt('<%=cgpa_data.totalCredits%>'); // Total completed credits
                            let pfCredits = parseFloat(document.getElementById("pfCredits").value) || 0; // Parse P/F credits
                            let averageGPA = parseFloat(document.getElementById("averageGPA").value) || 0; // Parse semester credits
                            let newCredits = parseFloat(document.getElementById("newCredits").value) || 0; // Parse GPA raise amount (fixed this part)
                            
                            const totalCredits = degreeCreditsUntilNow - pfCredits; // Adjust total credits by subtracting P/F credits

                            if(averageGPA < 0 || newCredits < 0.0){
                                alert("You have entered a negative value!");
                            }

                            // Calculate the required semester GPA using the fixed function
                            var newCGPA = calculateNewCGPA(currentGPA, totalCredits, averageGPA, newCredits) 
                            
                            // Output the result to the "needGPA" field
                            document.getElementById("newCGPA").value = newCGPA;
                        }

                    </script>

                    <script>

                        let retakeArray = [];

                        function handleRetakeCheck(details, course) {
                            courseIndex = details.split(" ")[0];
                            semesterIndex = details.split(" ")[1];
                            courseData = JSON.parse(course.replace(/&quot;/g, '"'));
                            var checkbox = document.getElementById("retake " + courseIndex + " " + semesterIndex);
                            if (checkbox.checked) {
                                // openModal(courseIndex, semesterIndex);
                                retakeArray.push({course: courseData, retakeAgainst: null});
                            } else {
                                retakeArray = retakeArray.filter(item => item.course.title !== courseData.title);
                            }
                            updateRetakeModal(checkbox.checked);
                        }

                        function updateRetakeModal(checked) {
                            const modalBody = document.getElementById('retakeModalBody');
                            modalBody.innerHTML = '';

                            retakeArray.forEach((retakeItem, index) => {
                                const selectOptions = `<select class="form-select" style="width:60%; display:inline-block;" id="retake-select-${index}" onchange="updateRetakeAgainst(${index}, this.value)">
                                                        <option value="">Select course to retake against</option>
                                                        <% reversedSemesters.slice(1, reversedSemesters.length).forEach((semester) => { %>
                                                            <% semester.courses.forEach((prevCourse) => { %>
                                                                <option value="<%= prevCourse.gradePoints %>|<%= prevCourse.title %>" 
                                                                        data-title="<%= prevCourse.title %>">
                                                                    <%= prevCourse.title %> - <%= semester.semester %>
                                                                </option>
                                                            <% }); %>
                                                        <% }); %>
                                                    </select>`;

                                modalBody.innerHTML += `
                                    <div>
                                    <b>Retaking:</b> ${retakeItem.course.title}
                                    <br />
                                    <b>Retake against:</b> ${selectOptions}
                                    </div>
                                    `;
                                    if(index != retakeArray.length - 1) {
                                        modalBody.innerHTML += '<br />';
                                    }
                            });

                            // After rendering the select, set the selected course
                            retakeArray.forEach((retakeItem, index) => {
                                const selectElement = document.getElementById(`retake-select-${index}`);
                                const options = selectElement.options;

                                for (let i = 0; i < options.length; i++) {
                                    if (options[i].getAttribute('data-title') === retakeItem.retakeCourse?.title) {
                                        options[i].selected = true;
                                        break;
                                    }
                                }
                            });

                            if (retakeArray.length > 0 && checked) {
                                $('#retakeModal').modal('show');
                            }
                        }


                        function openModal(courseIndex, semesterIndex) {
                            var modal = new bootstrap.Modal(document.getElementById('retakeModal'), {
                                keyboard: false
                            });
                            modal.show();
                        }

                        function updateRetakeAgainst(index, value) {
                            // Split the value to extract gradePoints and title
                            const [gradePoints, courseTitle] = value.split('|');

                            // Update the retakeArray with both the course title and gradePoints
                            retakeArray[index].retakeCourse = {
                                title: courseTitle,
                                gradePoints: gradePoints
                            };

                            // console.log(`Updated retake array: `, retakeArray);  // For debugging purposes
                        }
                    
                        const gradePointsMap = {
                            'A': 4.0,
                            'A-': 3.7,
                            'B+': 3.3,
                            'B': 3.0,
                            'B-': 2.7,
                            'C+': 2.3,
                            'C': 2.0,
                            'C-': 1.7,
                            'D+': 1.3,
                            'D': 1.0,
                            'D-': 0.7,
                            'F (w P/F)': 0.0,
                            'TP': 0.0,
                            'P': 0.0,
                            'AU': 0.0,
                            'F (w/o P/F)': 0.0
                        };
                        var CGPA = parseFloat("<%= cgpa_data.degreeCGPA %>");
                        var totalCredits = parseInt("<%= cgpa_data.totalCredits %>")
                        var cgpa_data = JSON.parse('<%- JSON.stringify(cgpa_data) %>')
                        var reversedSemesters = cgpa_data.semesters.slice().reverse();
                        
                        function getGradePoint(grade) {
                            return gradePointsMap[grade] || 0; // Return the grade point, or 0 if grade is not valid
                        }

                        function getLesserGrade(grade1, grade2) {
                            // Compare grade points and return the grade with the lesser grade point
                            if (grade1 == "P") {
                                return grade2;
                            } else if (getGradePoint(grade1) > grade2) {
                                return grade2;
                            } else {
                                return getGradePoint(grade1);
                            }
                        }

                        function updateCalculation() {
                            
                            let semCredits = 0;
                            let semCreditsCGPA = 0;
                            let totalGradePoints = 0;
                            let totalGradePointsCGPA = 0;
                            let pfCredits = 0;

                            // Iterate over each row in the table
                            const rows = document.querySelectorAll('#tblListViewCR2 tbody tr');
                            rows.forEach(row => {
                                // Get the course code, selected grade, and credits
                                const courseCode = row.querySelector('td:nth-child(2)')?.innerText;
                                const gradeSelect = row.querySelector('select[name="letter-grade"]');
                                const grade = gradeSelect ? gradeSelect.value : null;
                                let credits = row.querySelector('td:nth-child(4)') ? parseFloat(row.querySelector('td:nth-child(4)').innerText) : 0;

                                if (grade && grade !== 'Select') {
                                    // Check if the course exists in the retake array
                                    const retakeItem = retakeArray.find(item => item.course.code === courseCode);
                                    let finalGrade = getGradePoint(grade);

                                    if (retakeItem) {
                                        // If the course is being retaken, get the lesser grade and subtract
                                        // console.log(parseFloat(retakeItem.retakeAgainst));
                                        let gradetoSubtract = getLesserGrade(grade, parseFloat(retakeItem.retakeCourse.gradePoints)/credits);
                                        semCreditsCGPA -= credits;
                                        totalGradePointsCGPA -= gradetoSubtract * credits;
                                        // console.log("Retake: ", gradetoSubtract, credits);
                                    }
                                    if (grade == "P" || grade == "TP" || grade == "F (w P/f)" || grade == "AU") {
                                        pfCredits += credits;
                                        credits = 0;
                                    }
                                    // console.log(finalGrade, credits);
                                    // const gradePoint = getGradePoint(finalGrade);
                                    semCredits += credits;
                                    semCreditsCGPA += credits;
                                    totalGradePoints += finalGrade * credits;
                                    totalGradePointsCGPA += finalGrade * credits;
                                }
                            });
                            // console.log("Sem Credits: ", semCredits, "Total grade points: ", totalGradePoints);
                            // console.log("Sem Credits CGPA: ", semCreditsCGPA, "Total grade points CGPA: ", totalGradePointsCGPA);
                            // Calculate CGPA and SemGPA
                            const gpa = totalGradePoints / semCredits;
                            let newCGPA = ((CGPA * totalCredits) + totalGradePointsCGPA) / (totalCredits + semCreditsCGPA);
                            newCGPA = Math.round(newCGPA * 100) / 100;
                            // Update with the new values
                            document.getElementById("gpa-upcoming 1").innerText = "Predicted GPA: " + gpa.toFixed(2);
                            document.getElementById("creditsEarned-upcoming 1").innerText = "Predicted Semester Credits Earned: " + semCredits;
                            document.getElementById("cgpa-upcoming 1").innerText = "PCGPA: " + newCGPA;
                            document.getElementById("blue-cgpa").innerText = "Predicted Degree/Diploma CGPA: " + newCGPA;
                            document.getElementById("blue-totalCredits").innerText = "Predicted Total counted credits: " + (totalCredits + semCreditsCGPA + pfCredits);
                        }
                        

                    </script>
                        
                    <script src="/platform/assets/libs/jquery/dist/jquery.min.js"></script>
                    <script src="/platform/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
                    <script src="/platform/assets/js/sidebarmenu.js"></script>
                    <script src="/platform/assets/js/app.min.js"></script>
                    <script src="/platform/assets/libs/apexcharts/dist/apexcharts.min.js"></script>
                    <script src="/platform/assets/libs/simplebar/dist/simplebar.js"></script>
                    <script src="/platform/assets/js/dashboard.js"></script>
                    <script src="/platform/assets/js/theme.js"></script>
                    <script src="/platform/assets/js/main.js"></script>
                    <!-- <script src="https://code.jquery.com/jquery-3.7.0.js"></script> -->
                    <script src="/platform/assets/js/dataTables.js"></script>
                    <!-- <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap4.min.js"></script> -->
                    <!-- <%-include("../partials/preloader-js")%> -->
    </body>

</html>