<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>SG Platform</title>
    <link
      rel="shortcut icon"
      type="image/png"
      href="/platform/assets/images/logos/favicon.png"
    />
    <link rel="stylesheet" href="/platform/assets/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <link href="https://fonts.gstatic.com" rel="preconnect" />
    <link
      href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <%-include("../../partials/preloader-css")%>
    <style>

      .search-bar {
        width: 100%;
        padding: 14px;
        border-radius: 30px;
        font-size: 14px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease-in-out;
      }
      
      .search-bar:focus {
        outline: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        border-color: #5d87ff; /* Change the border color on focus */
      
      }
      
      /* Style the placeholder text */
      .search-bar::placeholder {
        color: #888; /* Adjust the color to your preference */
        transition: font-size 0.3s ease-out;
      }
      
      /* Move the placeholder text on focus */
      .search-bar:focus::placeholder {
        font-size: 12px; /* Adjust the font size when moved to the top */
      }

      .laptop {
          width: 500px; /* Adjust height as needed */
          background-color: #f0f0f0;
      }

      .offcanvas-body::-webkit-scrollbar {
        width: 8px; /* Adjust width as needed */
      }

      .offcanvas-body::-webkit-scrollbar-track {
        background-color: #f1f1f1; 
      }

      .offcanvas-body::-webkit-scrollbar-thumb {
        background-color: #8ca5e9; 
      }

      #read-more-btn {
        padding: 0;
        margin-top: 10px;
        text-decoration: none;
        color: #5d87ff;
      }

      #read-more-btn:hover {
        text-decoration: underline;
      }

      #description-container {
        margin-bottom: 20px;
      }

      .form-check-input:checked + .form-check-label {
        background-color: #5d87ff !important;
        color: white;
        border-color: #5d87ff !important;
      }

      .form-check-label:hover {
        background-color: #e9ecef;
      }

      .track-inductions-btn {
        transition: all 0.3s ease;
        white-space: nowrap;
      }

      .track-inductions-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }

      .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      }
    </style>
  </head>

  <%-include("../../partials/post-head")%>

  <body>
    <%-include("../../partials/preloader")%>
    <div
      class="page-wrapper"
      id="main-wrapper"
      data-layout="vertical"
      data-navbarbg="skin6"
      data-sidebartype="full"
      data-sidebar-position="fixed"
      data-header-position="fixed"
    >
      <%-include("../../partials/sidebar")%>
      <div class="body-wrapper">
        <%-include("../../partials/header")%>

        <div class="container-fluid">
          <div class="container-fluid">
            <div class="flex-row mb-2" style="text-align: center;">
              <br />
              <span class="fs-8 fw-semibold">Student Organisations Catalogue</span><br />
              <!-- <p>
                This section serves as a comprehensive resource for all intercollegiate events and competitions available for Ashoka University students. Here, you will find interest forms for each competition. Once you fill out the form, the designated Point of Contact (POC) for that event will reach out to you with further information. Please be sure to review the <a target="_blank" href="https://my.ashoka.edu.in/SIS/UploadedFile/OrientationMaterial/Policies_7134c043-59fe-4c07-baa1-564cfbea2a3e.pdf">off-campus policy</a> before applying for any competitions. If you encounter any challenges, don’t hesitate to reach out via email or phone: 
                <br /><br />
                - Vibha: <a href=mailto:vibha.rawat_ug2023@ashoka.edu.in>vibha.rawat_ug2023@ashoka.edu.in</a> &nbsp;&nbsp;|&nbsp;&nbsp; 9667764435  <br />
                - Guntaas: <a href="mailto:guntaas.kaur_ug2023@ashoka.edu.in">guntaas.kaur_ug2023@ashoka.edu.in</a> &nbsp;&nbsp;|&nbsp;&nbsp; +91 98118 06032
              </p> -->
                <span class="fs-4">Find and connect with all <%= organisations.length %> student organizations through our catalogue—featuring clubs, societies, fests, collectives, ISOs, leagues, and more! </span>
              <br /><br />
            </div>
            
            <div style="width:500px" class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
              <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel"></h5>
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
              </div>
              <div id="clubDetails" class="offcanvas-body">
              </div>
            </div>
            <!-- <h1 class="mb-4 mt-4">Organisations Catalogue</h1> -->

            <div id="search-section" class="mb-4">
              <!-- <h3>Search by Name</h3> -->
              <input
                type="text"
                id="search-bar"
                class="form-control search-bar"
                placeholder="Type to search..."
              />

              <div class="mt-3 d-flex justify-content-center">
                <div class="form-check custom-checkbox">
                  <input
                    type="checkbox"
                    class="form-check-input"
                    id="inductions-open"
                    style="cursor: pointer; display: none;"
                  />
                  <label 
                    class="form-check-label px-2 py-1 rounded-pill" 
                    for="inductions-open"
                    style="
                      cursor: pointer;
                      background-color: #f0f2f5;
                      transition: all 0.3s ease;
                      font-size: 0.9rem;
                      border: 1px solid #dee2e6;
                    "
                  >
                    <span style="padding: inherit; font-size: x-small; margin-bottom: -2px;" class="badge bg-success rounded-pill py-2"> </span> &nbsp;Show Inductions Open Only
                  </label>
                </div>
              </div>

              <div class="mt-3">
                <div class="d-flex flex-wrap gap-3 justify-content-center">
                  <div class="form-check custom-checkbox">
                    <input
                      type="checkbox"
                      class="form-check-input"
                      id="select-all"
                      checked
                      style="cursor: pointer;display: none;"
                    />
                    <label 
                      class="form-check-label text-capitalize px-2 py-1 rounded-pill" 
                      for="select-all"
                      style="
                        cursor: pointer;
                        background-color: #f0f2f5;
                        transition: all 0.3s ease;
                        font-size: 0.9rem;
                        border: 1px solid #dee2e6;
                      "
                    >
                      Select All
                    </label>
                  </div>                  
                  <% types.forEach(type => { %>
                    <div class="form-check custom-checkbox">
                      <input
                        type="checkbox"
                        class="form-check-input"
                        id="type-<%= type %>"
                        name="types"
                        value="<%= type %>"
                        checked
                        style="cursor: pointer; display:none;"
                      />
                      <label 
                        class="form-check-label text-capitalize px-2 py-1 rounded-pill" 
                        for="type-<%= type %>"
                        style="
                          cursor: pointer;
                          background-color: #f0f2f5;
                          transition: all 0.3s ease;
                          font-size: 0.9rem;
                          border: 1px solid #dee2e6;
                        "
                      >
                        <%= type %>
                      </label>
                    </div>
                  <% }); %>
                </div>
              </div>

              <!-- Tracked Clubs Button -->
              <div class="mt-3 d-flex justify-content-center">
                <button 
                  class="btn btn-outline-primary" 
                  type="button" 
                  data-bs-toggle="offcanvas" 
                  data-bs-target="#trackedClubsOffcanvas" 
                  aria-controls="trackedClubsOffcanvas"
                >
                  <i class="fas fa-list-check"></i> My Tracked Clubs (<span id="tracked-count">0</span>)
                </button>
              </div>
            </div>

            <!-- Tracked Clubs Off-canvas -->
            <div class="offcanvas offcanvas-end" tabindex="-1" id="trackedClubsOffcanvas" aria-labelledby="trackedClubsOffcanvasLabel">
              <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="trackedClubsOffcanvasLabel">
                  <i class="fas fa-bell text-warning"></i> My Tracked Clubs
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
              </div>
              <div class="offcanvas-body">
                <div id="tracked-clubs-loading" class="text-center" style="display: none;">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Updating tracked clubs...</p>
                </div>
                
                <div id="tracked-clubs-content">
                  <div id="tracked-clubs-empty" class="text-center text-muted" style="display: none;">
                    <i class="fas fa-bell-slash fa-3x mb-3"></i>
                    <h6>No clubs tracked yet</h6>
                    <p>Start tracking clubs to see their induction deadlines here!</p>
                  </div>
                  
                  <div id="tracked-clubs-list">
                    <!-- Tracked clubs will be populated here -->
                  </div>
                </div>
              </div>
            </div>

            <div id="results-section">

              <div id="results-list" class="row g-4">
                <% organisations.forEach((org) => { %>
                <div
                  class="col-12 col-md-6 col-lg-4 organisation-item"
                  data-name="<%= org.name %>"
                  data-type="<%= org.type %>"
                  data-org-id="<%= org.id %>"
                >
              
                    <div class="card h-100">
                    <% if (true) { %>
                      <% if (org.induction) { %>
                      <div style="position: absolute; top: 12px; right: 8px; z-index: 1;">
                        <span id="inductionBadge" style="font-size: x-small; padding: inherit;" class="badge bg-success rounded-pill px-2 py-2"> </span>
                      </div>
                      <% } %>
                      <img
                      src="<%= org.profile?.data?.[0]?.attributes?.profile_url 
                          ? org.profile.data[0].attributes.profile_url.replace(/=s\d+/g, '=s256') 
                          : '' %>"
                      width="100"
                      height="100"
                      style="margin:auto;margin-top:15px"
                      class="rounded-circle"
                      />

                    <% } else { %>
                    <div
                      class="card-img-top bg-light d-flex align-items-center justify-content-center"
                      style="height: 200px"
                    >
                      <i class="fa fa-building fa-4x text-muted"></i>
                    </div>
                    <% } %>
                    <div style="text-align:center" class="card-body">
                      <h3 style="margin:auto" class="card-title"><%= org.name %></h3><br/>
                      <p class="card-text">
                        <span class="badge bg-primary text-capitalize"><%= org.type %></span>                      
                      </p>
                      <% if (org.short_description) { %>
                      <p class="card-text text-muted" style="text-align: justify;">
                        <%- org.short_description.length > 300 ? 
                          org.short_description.substring(0, 300) + '...' : 
                          org.short_description 
                        %>
                      </p>
                      <% } %>

                      <%
                      function escapeDescription(org) {
                        let orgCopy = JSON.parse(JSON.stringify(org)); // Deep copy                        
                        
                        // Helper function to escape special characters
                        function escapeString(str) {
                          if (typeof str !== 'string') return str;
                          return str
                            .replace(/\\/g, '\\\\')    // Escape backslashes
                            .replace(/"/g, '\\"')      // Escape double quotes
                            .replace(/\n/g, '\\n')     // Escape newlines
                            .replace(/\r/g, '\\r')     // Escape carriage returns
                            .replace(/\t/g, '\\t')     // Escape tabs
                            .replace(/\f/g, '\\f');    // Escape form feeds
                        }

                        // Escape description and short_description
                        if (orgCopy.description) {
                          orgCopy.description = escapeString(orgCopy.description);
                          orgCopy.induction_description = escapeString(orgCopy.induction_description);
                        }
                        if (orgCopy.short_description) {
                          orgCopy.short_description = escapeString(orgCopy.short_description);
                        }

                        // Convert to JSON string and escape for HTML
                        return JSON.stringify(orgCopy);
                        }

                        let orgEscaped = escapeDescription(org);

                        // Check if user is tracking this organisation
                        const isTracking = org.interested_applicants?.data?.some(applicant => 
                          applicant.id === userId
                        ) || false;
                      %>
                      <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 90%;">
                        <div class="d-flex gap-2 justify-content-center">
                          <button 
                            class="btn btn-sm track-inductions-btn <%= isTracking ? 'btn-warning' : 'btn-outline-warning' %>" 
                            data-org-id="<%= org.id %>"
                            data-tracking="<%= isTracking %>"
                            type="button"
                            style="font-size: 0.75rem; padding: 4px 8px; flex: 1; white-space: nowrap;"
                          >
                            <i class="fas fa-bell<%= isTracking ? '' : '-slash' %>"></i>
                            <%= isTracking ? 'Tracking Inductions' : 'Track Inductions' %>
                          </button>
                          <button onclick='showClubDetails(`<%= orgEscaped %>`)' class="btn btn-primary btn-sm" type="button" style="flex: 1;">
                            Learn More
                          </button>
                        </div>
                      </div>
                    </div>
                    </div>
                </div>
                <% }) %>
              </div>
            </div>
            <!-- XL Modal -->
            <div class="modal fade" id="orgDetailsModal" tabindex="-1" aria-labelledby="orgDetailsModalLabel">
              <div class="modal-dialog modal-xl modal-dialog-centered" style="max-height: 80vh;">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="orgDetailsModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="container-fluid">
                      <div class="row">
                        <!-- Profile Picture & Basic Info -->
                        <div class="col-md-4 text-center">
                          <img id="orgProfileImage" src="" alt="Profile Image" class="rounded-circle" style="width: 200px; height: 200px; margin-bottom:15px; object-fit: cover;">
                        </div>
                        <div class="col-md-8" style="padding-top: 30px;">
                          <h4 id="orgName" class="mb-3"></h4>
                          <p><strong>Type:</strong> <span id="orgType"></span></p>
                          <p><strong>People:</strong> <span id="orgPeople" style="text-decoration: underline;"></span></p>
                          <p><strong>Inductions:</strong> <span id="orgInduction"></span> | <strong>Deadline:</strong> <span id="orgInductionDeadline"></span></p>
                          <h5 style="display: inline-block; margin-right: 10px;">Social Links:</h5> <span id="orgSocials"></span>
                        </div>
                        <!-- Inductions -->
                        
                        <!-- Description -->
                        <div class="col-md-12">                          
                          <div class="p-3" style="text-align: justify; max-height: 350px; overflow-y: scroll;">                            
                            <div class="accordion" id="inductionAccordion">
                              <div class="accordion" id="circle2Accordion">
                                <div class="accordion-item">
                                  <h2 class="accordion-header" id="circle2Heading">
                                    <button class="accordion-button collapsed" style="background-color: #e6e3e3;" type="button" data-bs-toggle="collapse" data-bs-target="#circle2Collapse" aria-expanded="false" aria-controls="circle2Collapse">
                                      <strong>Core Team Members</strong>
                                    </button>
                                  </h2>
                                  <div id="circle2Collapse" class="accordion-collapse collapse" aria-labelledby="circle2Heading" data-bs-parent="#circle2Accordion">
                                    <div class="accordion-body">
                                      <div id="orgCircle2Humans" style="text-align: justify; overflow-y: auto;"></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <br />
                              <div class="accordion-item">
                                <h2 class="accordion-header" id="inductionHeading">
                                  <button class="accordion-button collapsed" style="background-color: #e6e3e3;" type="button" data-bs-toggle="collapse" data-bs-target="#inductionCollapse" aria-expanded="false" aria-controls="inductionCollapse">
                                    <strong>Inductions Information</strong>
                                  </button>
                                </h2>
                                <div id="inductionCollapse" class="accordion-collapse collapse" aria-labelledby="inductionHeading" data-bs-parent="#inductionAccordion">
                                  <div class="accordion-body">
                                    <div id="orgInductionDescription" style="text-align: justify; overflow-y: auto;"></div>
                                  </div>
                                </div>
                              </div>
                              <br />
                            </div>                            
                            <div id="orgDescription"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

          </div>
          <script type="application/json" id="organisations-data"><%- JSON.stringify(organisations) %></script>
          <script>
            window.organisationsData = JSON.parse(
              document.getElementById('organisations-data').textContent
            );
          </script>

          <script>
            // Make organisations data available globally for JavaScript
            // window.organisationsData = <%- JSON.stringify(organisations) %>;
            
            document.addEventListener("DOMContentLoaded", function() {
              // Select all induction badges (there might be multiple)
              const inductionBadges = document.querySelectorAll("#inductionBadge");
              
              // Add hover functionality to each badge
              inductionBadges.forEach(badge => {
                // Set initial text
                badge.innerText = " "; // Initially empty
                
                // Apply pointer cursor
                badge.style.cursor = "pointer";
                
                // Show text on hover
                badge.addEventListener("mouseenter", function() {
                  this.innerText = "Inductions Open";
                });
                
                // Hide text when not hovering
                badge.addEventListener("mouseleave", function() {
                  this.innerText = " ";
                });
              });
            });
            function showClubDetails(org) {
              // console.log(org);
              let clubData = JSON.parse(org);

              // Set modal title
              document.getElementById("orgDetailsModalLabel").innerText = clubData.name;

              // Set profile image
              let profileImg = document.getElementById("orgProfileImage");
              profileImg.src = clubData.profile.data[0].attributes.profile_url.replace(/=s\d+/g, "=s256"); 
              profileImg.alt = clubData.name;

              // Set basic details
              document.getElementById("orgName").innerText = clubData.name;
              document.getElementById("orgType").innerText = clubData.type;
              const peopleList = clubData.circle1_humans.data
                .map(person => person.attributes.username)
                .join(", ");
              document.getElementById("orgPeople").innerText = peopleList || "N/A";
              document.getElementById("orgInduction").innerText = clubData.induction ? "Open" : "Closed";
              // Handle Circle 2 Humans
              // console.log(clubData);
              if (clubData.circle2_humans && clubData.circle2_humans.data && clubData.circle2_humans.data.length > 0) {
                // Format the circle2 humans list
                const circle2List = clubData.circle2_humans.data
                  .map(person => person.attributes.username)
                  .join(", ");
                
                document.getElementById("orgCircle2Humans").innerHTML = circle2List;
                document.getElementById("circle2Accordion").style.display = "block";
              } else {
                // Hide the accordion if no circle2 humans exist
                document.getElementById("circle2Accordion").style.display = "none";
              }
              // Format the induction deadline date
              let deadlineText = "N/A";
              if (clubData.induction_end) {
                try {
                  const deadline = new Date(clubData.induction_end);
                  // Adjust for IST conversion by subtracting 5:30 hours (330 minutes)
                  deadline.setMinutes(deadline.getMinutes() - 330);
                  // Format: "March 30, 2025 at 6:30 PM"
                  deadlineText = deadline.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric'
                  }) + ' at ' + 
                  deadline.toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                  });
                } catch (e) {
                  console.error("Error formatting date:", e);
                  deadlineText = clubData.induction_end; // Fallback to original value
                }
              }
              document.getElementById("orgInductionDeadline").innerText = deadlineText;
              // Set social links
              const socialIcons = {
                Instagram: '<i class="fab fa-instagram"></i>',
                Twitter: '<i class="fab fa-twitter"></i>',
                LinkedIn: '<i class="fab fa-linkedin"></i>',
                YouTube: '<i class="fab fa-youtube"></i>',
                WhatsApp: '<i class="fab fa-whatsapp"></i>',
                Website: '<i class="fas fa-globe"></i>',
              };

              const socialLinks = {
                Instagram: clubData.instagram,
                Twitter: clubData.twitter,
                LinkedIn: clubData.linkedin,
                YouTube: clubData.youtube,
                WhatsApp: clubData.whatsapp,
                Website: clubData.website_blog,
              };

              let socialsHTML = "";
              for (const [platform, link] of Object.entries(socialLinks)) {
                if (link) {
                  socialsHTML += `<a href="${link}" target="_blank" style="margin-right: 15px; font-size: 24px; color: inherit;">
                                    ${socialIcons[platform]}
                                  </a>`;
                }
              }
              document.getElementById("orgSocials").innerHTML = socialsHTML || "No links available.";
              // console.log(clubData.description)
              // Set inductions description
              // console.log(clubData.induction_description);
              (document.getElementById("orgInductionDescription")).innerHTML = clubData.induction_description || "";
              // Set description
              (document.getElementById("orgDescription")).innerHTML = clubData.description;
              // Hide induction div if inductions are closed
              if (!clubData.induction) {
                document.getElementById("inductionAccordion").style.display = "none";
              } else {
                document.getElementById("inductionAccordion").style.display = "block";
              }
              // Show the modal
              let orgDetailsModal = new bootstrap.Modal(document.getElementById("orgDetailsModal"));
              orgDetailsModal.show();
            }

            // function toggleDescription() {
            //   const shortDesc = document.getElementById('short-description');
            //   const fullDesc = document.getElementById('full-description');
            //   const readMoreBtn = document.getElementById('read-more-btn');

            //   if (fullDesc.style.display === 'none') {
            //     shortDesc.style.display = 'none';
            //     fullDesc.style.display = 'block';
            //     readMoreBtn.textContent = 'Show Less';
            //   } else {
            //     shortDesc.style.display = 'block';
            //     fullDesc.style.display = 'none';
            //     readMoreBtn.textContent = 'Read More';
            //   }
            // }

            document.addEventListener("DOMContentLoaded", () => {
              const organisationItems = document.querySelectorAll(".organisation-item");
              const searchBar = document.getElementById("search-bar");
              const typeCheckboxes = document.querySelectorAll('input[name="types"]');
              const selectAllCheckbox = document.getElementById("select-all");
              const inductionsCheckbox = document.getElementById("inductions-open");

              function filterOrganizations() {
                const searchQuery = searchBar.value.toLowerCase();
                const selectedTypes = Array.from(
                  document.querySelectorAll('input[name="types"]:checked')
                ).map((input) => input.value);
                const showInductionsOnly = inductionsCheckbox.checked;

                organisationItems.forEach((item) => {
                  const itemName = item.getAttribute("data-name").toLowerCase();
                  const itemType = item.getAttribute("data-type");
                  const hasInduction = item.querySelector(".bg-success") !== null;

                  const matchesSearch = itemName.includes(searchQuery);
                  const matchesType = selectedTypes.length === 0 || selectedTypes.includes(itemType);
                  const matchesInduction = !showInductionsOnly || hasInduction;

                  item.style.display = matchesSearch && matchesType && matchesInduction ? "" : "none";
                });
              }

              function updateSelectAllState() {
                const allChecked = [...typeCheckboxes].every(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked;
              }

              // "Select All" checkbox behavior
              if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener("change", () => {
                  const isChecked = selectAllCheckbox.checked;
                  typeCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                  });
                  filterOrganizations();
                });
              }

              // Update "Select All" state when any individual checkbox is toggled
              typeCheckboxes.forEach((checkbox) => {
                checkbox.addEventListener("change", () => {
                  updateSelectAllState();
                  filterOrganizations();
                });
              });

              // Add event listener for inductions checkbox
              if (inductionsCheckbox) {
                inductionsCheckbox.addEventListener("change", filterOrganizations);
              }

              // Add event listener for search bar
              if (searchBar) {
                searchBar.addEventListener("input", filterOrganizations);
              }

              // Initial filter call to ensure proper state
              setTimeout(() => {
                filterOrganizations();
              }, 100);
            });

            // Track inductions functionality
            document.addEventListener("DOMContentLoaded", function() {
              const trackButtons = document.querySelectorAll(".track-inductions-btn");
              
              trackButtons.forEach((button, index) => {                
                button.addEventListener("click", function() {                  
                  const orgId = this.getAttribute("data-org-id");
                  const isCurrentlyTracking = this.getAttribute("data-tracking") === "true";
                  
                  // Disable button and show loading state
                  this.disabled = true;
                  const originalContent = this.innerHTML;
                  this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
                  
                  // Send the request to the server
                  fetch("/platform/track-inductions", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      organisationIds: [orgId]
                    })
                  })
                  .then(response => response.json())
                  .then(data => {
                    if (data.success) {
                      // Update the data attribute for future clicks
                      this.setAttribute("data-tracking", !isCurrentlyTracking);
                      // Toggle the button state
                      toggleButtonState(this, !isCurrentlyTracking);
                      
                      // Update tracked clubs list
                      updateTrackedClubsList();
                      
                      // Show success message (optional)
                      // showToast(data.message, "success");
                    } else {
                      // Restore original content if request failed
                      this.innerHTML = originalContent;
                      console.error("Error:", data.error);
                      // showToast("Error updating tracking preferences", "error");
                    }
                  })
                  .catch(error => {
                    // Restore original content if request failed
                    this.innerHTML = originalContent;
                    console.error("Error:", error);
                    // showToast("Network error. Please try again.", "error");
                  })
                  .finally(() => {
                    // Re-enable button
                    this.disabled = false;
                  });
                });
              });
              
              function toggleButtonState(button, isTracking) {
                const icon = button.querySelector("i");
                
                if (isTracking) {
                  button.className = "btn btn-sm track-inductions-btn btn-warning";
                  button.innerHTML = '<i class="fas fa-bell"></i> Tracking';
                } else {
                  button.className = "btn btn-sm track-inductions-btn btn-outline-warning";
                  button.innerHTML = '<i class="fas fa-bell-slash"></i> Track Inductions';
                }
              }
              
              // Optional: Toast notification function
              // function showToast(message, type) {
              //   // Implementation depends on your toast library
              //   console.log(type + ": " + message);
              // }

              // Tracked clubs functionality
              function updateTrackedClubsList() {
                const trackedClubsList = document.getElementById('tracked-clubs-list');
                const trackedCount = document.getElementById('tracked-count');
                const emptyState = document.getElementById('tracked-clubs-empty');
                const loadingState = document.getElementById('tracked-clubs-loading');
                
                // Show loading state
                loadingState.style.display = 'block';
                emptyState.style.display = 'none';
                trackedClubsList.innerHTML = '';
                
                // Get all currently tracked organizations from DOM
                const trackedOrgs = [];
                const orgElements = document.querySelectorAll('.organisation-item');
                
                orgElements.forEach(orgElement => {
                  const trackButton = orgElement.querySelector('.track-inductions-btn');
                  if (trackButton && trackButton.getAttribute('data-tracking') === 'true') {
                    const orgId = trackButton.getAttribute('data-org-id');
                    const orgName = orgElement.getAttribute('data-name');
                    const orgType = orgElement.getAttribute('data-type');
                    
                    // Find the organisation data from the global organisations array
                    const organisations = window.organisationsData || [];
                    const orgData = organisations.find(org => org.id.toString() === orgId);
                    
                    if (orgData) {
                      trackedOrgs.push(orgData);
                    } else {
                      // Fallback if organisation data not found
                      trackedOrgs.push({
                        id: orgId,
                        name: orgName,
                        type: orgType,
                        induction: false,
                        induction_end: null,
                        profile: { data: [{ attributes: { profile_url: '' } }] }
                      });
                    }
                  }
                });
                
                // Hide loading state
                setTimeout(() => {
                  loadingState.style.display = 'none';
                  
                  // Update count
                  trackedCount.textContent = trackedOrgs.length;
                  
                  if (trackedOrgs.length === 0) {
                    emptyState.style.display = 'block';
                  } else {
                    emptyState.style.display = 'none';
                    
                    // Sort by induction deadline (soonest first)
                    trackedOrgs.sort((a, b) => {
                      if (!a.induction_end && !b.induction_end) return 0;
                      if (!a.induction_end) return 1;
                      if (!b.induction_end) return -1;
                      return new Date(a.induction_end) - new Date(b.induction_end);
                    });
                    
                    // Generate HTML for tracked clubs
                    trackedClubsList.innerHTML = trackedOrgs.map(org => {
                      const hasDeadline = org.induction_end;
                      const isInductionOpen = org.induction;
                      let deadlineText = 'No deadline set';
                      let deadlineClass = 'text-muted';
                      
                      if (hasDeadline) {
                        try {
                          const deadline = new Date(org.induction_end);
                          // Adjust for IST conversion by subtracting 5:30 hours (330 minutes)
                          deadline.setMinutes(deadline.getMinutes() - 330);
                          const now = new Date();
                          const timeDiff = deadline - now;
                          const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
                          
                          deadlineText = deadline.toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric'
                          });
                          
                          if (daysDiff < 0) {
                            deadlineClass = 'text-danger';
                            deadlineText += ' (Expired)';
                          } else if (daysDiff <= 3) {
                            deadlineClass = 'text-danger';
                            deadlineText += ` (${daysDiff} days left)`;
                          } else if (daysDiff <= 7) {
                            deadlineClass = 'text-warning';
                            deadlineText += ` (${daysDiff} days left)`;
                          } else {
                            deadlineClass = 'text-success';
                            deadlineText += ` (${daysDiff} days left)`;
                          }
                        } catch (e) {
                          deadlineText = 'Invalid date';
                          deadlineClass = 'text-muted';
                        }
                      }
                      
                      const profileUrl = org.profile?.data?.[0]?.attributes?.profile_url?.replace(/=s\d+/g, '=s32') || '';
                      
                      return `
                        <div class="card mb-3 border-start border-3 ${isInductionOpen ? 'border-success' : 'border-secondary'}">
                          <div class="card-body p-3">
                            <div class="d-flex align-items-start justify-content-between">
                              <div class="flex-grow-1">
                                <h6 class="card-title mb-1 d-flex align-items-center">
                                  <img src="${profileUrl}" 
                                       class="rounded-circle me-2" width="24" height="24" style="object-fit: cover;" 
                                       onerror="this.style.display='none'">
                                  ${org.name}
                                </h6>
                                <small class="text-muted text-capitalize">${org.type}</small>
                                <div class="mt-2">
                                  <div class="d-flex align-items-center mb-1">
                                    <i class="fas fa-calendar-alt text-primary me-2" style="width: 12px;"></i>
                                    <small class="${deadlineClass} fw-bold">${deadlineText}</small>
                                  </div>
                                  <div class="d-flex align-items-center">
                                    <i class="fas fa-door-${isInductionOpen ? 'open text-success' : 'closed text-secondary'} me-2" style="width: 12px;"></i>
                                    <small class="${isInductionOpen ? 'text-success' : 'text-muted'}">
                                      Inductions ${isInductionOpen ? 'Open' : 'Closed'}
                                    </small>
                                  </div>
                                </div>
                              </div>
                              <button 
                                class="btn btn-outline-danger btn-sm ms-2" 
                                onclick="untrackClub(${org.id})"
                                title="Stop tracking this club"
                              >
                                <i class="fas fa-bell-slash"></i>
                              </button>
                            </div>
                          </div>
                        </div>
                      `;
                    }).join('');
                  }
                }, 500); // Small delay for better UX
              }
              
              // Function to untrack a club from the off-canvas
              window.untrackClub = function(orgId) {
                // Find the corresponding track button and trigger its click
                const trackButton = document.querySelector(`.track-inductions-btn[data-org-id="${orgId}"]`);                
                if (trackButton && trackButton.getAttribute('data-tracking') === 'true') {
                  trackButton.click();
                }
              }
              
              // Initialize tracked clubs list when page loads
              updateTrackedClubsList();
            });

            // Initialize the tracked count on page load
            document.addEventListener("DOMContentLoaded", function() {
              const trackButtons = document.querySelectorAll('.track-inductions-btn[data-tracking="true"]');
              document.getElementById('tracked-count').textContent = trackButtons.length;
            });
   
          </script>
        </div>
      </div>
    </div>

    <script src="/platform/assets/libs/jquery/dist/jquery.min.js"></script>
    <script src="/platform/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/platform/assets/js/sidebarmenu.js"></script>
    <script src="/platform/assets/js/app.min.js"></script>
    <script src="/platform/assets/libs/apexcharts/dist/apexcharts.min.js"></script>
    <script src="/platform/assets/libs/simplebar/dist/simplebar.js"></script>
    <script src="/platform/assets/js/dashboard.js"></script>
    <script src="/platform/assets/js/theme.js"></script>
    <script src="/platform/assets/js/copytext.js"></script>

    <%-include("../../partials/preloader-js")%>
  </body>
</html>
